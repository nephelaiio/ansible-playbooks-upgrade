---
- block:

    - name: query existing workflows
      command: awx-cli workflow list -f json
      register: workflow_query

    - set_fact:
        workflow_data: "{{ workflow_query.stdout | from_json }}"

    - name: build workflow dict
      set_fact:
        workflow_dict: "{{ (workflow_dict | default({})) | combine({ workflow_item.name: workflow_item.id }) }}"
      loop_control:
        loop_var: workflow_item
        label: "{{ workflow_item.name }}"
      loop: "{{ workflow_data.results }}"

    - name: build workflow configuration options - {{ workflow.name }}
      set_fact:
        workflow_name: "-n {{ workflow.name | string | quote }}"
        workflow_description: "{{ ('--description ' + workflow.description | string | quote) if 'description' in workflow else '' }}"
        workflow_org: "{{ '--organization ' + organization.name | string | quote }}"

    - name: build workflow creation command - {{ workflow.name }}
      set_fact:
        workflow_source_create_args: "{{ workflow_name }} {{ workflow_description }} {{ workflow_org }}"

    - name: create workflow - {{ workflow.name }}
      command: "awx-cli workflow create {{ workflow_source_create_args }}"

    - name: create workflow nodes - {{ workflow.name }}
      command: >
        awx-cli node create -f json -W {{ workflow.name }}
          {{ workflow_node_template }}
          {{ workflow_node_inventory }}
          {{ workflow_node_jobtags }}
          {{ workflow_node_skiptags }}
      loop_control:
        loop_var: workflow_node
        label: "{{ workflow.name}} / {{ workflow_node.name }}"
      vars:
        workflow_node_inventory: "{{ ('--inventory ' + workflow_node.inventory | string | quote) if 'inventory' in workflow_node else '' }}"
        workflow_node_jobtags: "{{ ('--job-tags ' + ([workflow_node.job_tags] | flatten | join(',') | quote)) if 'job_tags' in workflow_node else '' }}"
        workflow_node_skiptags: "{{ ('--skip-tags ' + ([workflow_node.skip_tags] | flatten | join(',') | quote)) if 'skip_tags' in workflow_node else '' }}"
        workflow_node_template: "{{ ('--job-template ' + workflow_node.template | string | quote) if (workflow_node.type | default('job') == 'job') else ('--unified-job-template ' + (workflow_dict[workflow_node.template] | string)) }}"
      loop: "{{ workflow.nodes }}"
      register: workflow_nodes

    - name: register node names and operation results
      set_fact:
        workflow_node_names: "{{ workflow_nodes.results | map(attribute='workflow_node') | map(attribute='name') | list }}"
        workflow_node_ids: "{{ workflow_nodes.results | map(attribute='stdout') | map('from_json') | map(attribute='id') | list }}"

    - name: register node name id associations
      set_fact:
        workflow_node_pairs: "{{ workflow_node_names | zip(workflow_node_ids) | list }}"

    - name: associate workflow nodes
      command: "{{ workflow_node_associate }} -W {{ workflow.name }} {{ workflow_node_parent_id }} {{ workflow_node_id }}"
      loop_control:
        loop_var: workflow_node
        label: "{{ workflow.name }} / {{ workflow_node.name }}"
      vars:
        workflow_node_map: "{{ dict(workflow_node_pairs) }}"
        workflow_node_associate: "awx-cli node {{ 'associate_' + ( workflow_node.parent_type | default('success') ) + '_node' }}"
        workflow_node_name: "{{ workflow_node.name }}"
        workflow_node_id: "{{ [workflow_node_name] | map('extract', workflow_node_map)| list | head }}"
        workflow_node_parent_name: "{{ (workflow_node.parent | string | quote) if 'parent' in workflow_node else '' }}"
        workflow_node_parent_id: "{{ ([workflow_node_parent_name] | map('extract', workflow_node_map) | list | head) if workflow_node_parent_name != '' else '' }}"
      loop: "{{ workflow.nodes }}"
      when: workflow_node_parent_name != ''

    - name: associate workflow node credentials
      command: "awx-cli node associate_credential --node {{ workflow_node_id }} --credential {{ workflow_node_credential }}"
      loop_control:
        loop_var: workflow_credential
        label: "{{ workflow.name }} / {{ workflow_node.name }} / {{ workflow_node_credential }}"
      vars:
        workflow_node: "{{ workflow_credential.0 }}"
        workflow_node_map: "{{ dict(workflow_node_pairs) }}"
        workflow_node_name: "{{ workflow_node.name }}"
        workflow_node_id: "{{ [workflow_node_name] | map('extract', workflow_node_map)| list | head }}"
        workflow_node_credential: "{{ workflow_credential.1 }}"
      loop: "{{ workflow.nodes | subelements('credentials', 'skip_missing=yes') }}"

  tags:
    - workflows
